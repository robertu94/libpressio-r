// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "libpressio_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// get_instance
library_xptr get_instance();
RcppExport SEXP _libpressio_get_instance() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_instance());
    return rcpp_result_gen;
END_RCPP
}
// get_compressor
compressor_xptr get_compressor(library_xptr& library, std::string const& name);
RcppExport SEXP _libpressio_get_compressor(SEXP librarySEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< library_xptr& >::type library(librarySEXP);
    Rcpp::traits::input_parameter< std::string const& >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(get_compressor(library, name));
    return rcpp_result_gen;
END_RCPP
}
// get_io
io_xptr get_io(library_xptr& library, std::string const& name);
RcppExport SEXP _libpressio_get_io(SEXP librarySEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< library_xptr& >::type library(librarySEXP);
    Rcpp::traits::input_parameter< std::string const& >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(get_io(library, name));
    return rcpp_result_gen;
END_RCPP
}
// compressor_compress
void compressor_compress(compressor_xptr& compressor, data_xptr const& input, data_xptr& output);
RcppExport SEXP _libpressio_compressor_compress(SEXP compressorSEXP, SEXP inputSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< compressor_xptr& >::type compressor(compressorSEXP);
    Rcpp::traits::input_parameter< data_xptr const& >::type input(inputSEXP);
    Rcpp::traits::input_parameter< data_xptr& >::type output(outputSEXP);
    compressor_compress(compressor, input, output);
    return R_NilValue;
END_RCPP
}
// compressor_decompress
void compressor_decompress(compressor_xptr& compressor, data_xptr const& input, data_xptr& output);
RcppExport SEXP _libpressio_compressor_decompress(SEXP compressorSEXP, SEXP inputSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< compressor_xptr& >::type compressor(compressorSEXP);
    Rcpp::traits::input_parameter< data_xptr const& >::type input(inputSEXP);
    Rcpp::traits::input_parameter< data_xptr& >::type output(outputSEXP);
    compressor_decompress(compressor, input, output);
    return R_NilValue;
END_RCPP
}
// compressor_get_options
options_xptr compressor_get_options(compressor_xptr const& compressor);
RcppExport SEXP _libpressio_compressor_get_options(SEXP compressorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< compressor_xptr const& >::type compressor(compressorSEXP);
    rcpp_result_gen = Rcpp::wrap(compressor_get_options(compressor));
    return rcpp_result_gen;
END_RCPP
}
// compressor_get_documentation
options_xptr compressor_get_documentation(compressor_xptr const& compressor);
RcppExport SEXP _libpressio_compressor_get_documentation(SEXP compressorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< compressor_xptr const& >::type compressor(compressorSEXP);
    rcpp_result_gen = Rcpp::wrap(compressor_get_documentation(compressor));
    return rcpp_result_gen;
END_RCPP
}
// compressor_get_configuration
options_xptr compressor_get_configuration(compressor_xptr const& compressor);
RcppExport SEXP _libpressio_compressor_get_configuration(SEXP compressorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< compressor_xptr const& >::type compressor(compressorSEXP);
    rcpp_result_gen = Rcpp::wrap(compressor_get_configuration(compressor));
    return rcpp_result_gen;
END_RCPP
}
// compressor_get_metrics_results
options_xptr compressor_get_metrics_results(compressor_xptr const& compressor);
RcppExport SEXP _libpressio_compressor_get_metrics_results(SEXP compressorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< compressor_xptr const& >::type compressor(compressorSEXP);
    rcpp_result_gen = Rcpp::wrap(compressor_get_metrics_results(compressor));
    return rcpp_result_gen;
END_RCPP
}
// compressor_set_options
void compressor_set_options(compressor_xptr& compressor, options_xptr const& options);
RcppExport SEXP _libpressio_compressor_set_options(SEXP compressorSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< compressor_xptr& >::type compressor(compressorSEXP);
    Rcpp::traits::input_parameter< options_xptr const& >::type options(optionsSEXP);
    compressor_set_options(compressor, options);
    return R_NilValue;
END_RCPP
}
// io_read_with_template
data_xptr io_read_with_template(io_xptr& io, data_xptr data_template);
RcppExport SEXP _libpressio_io_read_with_template(SEXP ioSEXP, SEXP data_templateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< io_xptr& >::type io(ioSEXP);
    Rcpp::traits::input_parameter< data_xptr >::type data_template(data_templateSEXP);
    rcpp_result_gen = Rcpp::wrap(io_read_with_template(io, data_template));
    return rcpp_result_gen;
END_RCPP
}
// io_write
void io_write(io_xptr& io, data_xptr data);
RcppExport SEXP _libpressio_io_write(SEXP ioSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< io_xptr& >::type io(ioSEXP);
    Rcpp::traits::input_parameter< data_xptr >::type data(dataSEXP);
    io_write(io, data);
    return R_NilValue;
END_RCPP
}
// io_read
data_xptr io_read(io_xptr& io);
RcppExport SEXP _libpressio_io_read(SEXP ioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< io_xptr& >::type io(ioSEXP);
    rcpp_result_gen = Rcpp::wrap(io_read(io));
    return rcpp_result_gen;
END_RCPP
}
// io_get_options
options_xptr io_get_options(io_xptr const& io);
RcppExport SEXP _libpressio_io_get_options(SEXP ioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< io_xptr const& >::type io(ioSEXP);
    rcpp_result_gen = Rcpp::wrap(io_get_options(io));
    return rcpp_result_gen;
END_RCPP
}
// io_set_options
void io_set_options(io_xptr& io, options_xptr const& options);
RcppExport SEXP _libpressio_io_set_options(SEXP ioSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< io_xptr& >::type io(ioSEXP);
    Rcpp::traits::input_parameter< options_xptr const& >::type options(optionsSEXP);
    io_set_options(io, options);
    return R_NilValue;
END_RCPP
}
// supported_compressors
Rcpp::CharacterVector supported_compressors();
RcppExport SEXP _libpressio_supported_compressors() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(supported_compressors());
    return rcpp_result_gen;
END_RCPP
}
// supported_metrics
Rcpp::CharacterVector supported_metrics();
RcppExport SEXP _libpressio_supported_metrics() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(supported_metrics());
    return rcpp_result_gen;
END_RCPP
}
// supported_io
Rcpp::CharacterVector supported_io();
RcppExport SEXP _libpressio_supported_io() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(supported_io());
    return rcpp_result_gen;
END_RCPP
}
// data_to_R
Rcpp::NumericVector data_to_R(data_xptr const& ptr);
RcppExport SEXP _libpressio_data_to_R(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< data_xptr const& >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(data_to_R(ptr));
    return rcpp_result_gen;
END_RCPP
}
// data_new_empty
data_xptr data_new_empty(int dtype, std::vector<int> dims);
RcppExport SEXP _libpressio_data_new_empty(SEXP dtypeSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(data_new_empty(dtype, dims));
    return rcpp_result_gen;
END_RCPP
}
// data_new_owning
data_xptr data_new_owning(int dtype, std::vector<int> dims);
RcppExport SEXP _libpressio_data_new_owning(SEXP dtypeSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(data_new_owning(dtype, dims));
    return rcpp_result_gen;
END_RCPP
}
// io_data_path_read
data_xptr io_data_path_read(data_xptr& dims, std::string const& filepath);
RcppExport SEXP _libpressio_io_data_path_read(SEXP dimsSEXP, SEXP filepathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< data_xptr& >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type filepath(filepathSEXP);
    rcpp_result_gen = Rcpp::wrap(io_data_path_read(dims, filepath));
    return rcpp_result_gen;
END_RCPP
}
// data_new_clone
data_xptr data_new_clone(data_xptr const& ptr);
RcppExport SEXP _libpressio_data_new_clone(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< data_xptr const& >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(data_new_clone(ptr));
    return rcpp_result_gen;
END_RCPP
}
// data_from_R
data_xptr data_from_R(Rcpp::RObject obj);
RcppExport SEXP _libpressio_data_from_R(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(data_from_R(obj));
    return rcpp_result_gen;
END_RCPP
}
// data_from_R_typed
data_xptr data_from_R_typed(Rcpp::RObject obj, int type);
RcppExport SEXP _libpressio_data_from_R_typed(SEXP objSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type obj(objSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(data_from_R_typed(obj, type));
    return rcpp_result_gen;
END_RCPP
}
// options_from_R_typed
options_xptr options_from_R_typed(Rcpp::List const& l, options_xptr const& option_types);
RcppExport SEXP _libpressio_options_from_R_typed(SEXP lSEXP, SEXP option_typesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List const& >::type l(lSEXP);
    Rcpp::traits::input_parameter< options_xptr const& >::type option_types(option_typesSEXP);
    rcpp_result_gen = Rcpp::wrap(options_from_R_typed(l, option_types));
    return rcpp_result_gen;
END_RCPP
}
// options_from_R
options_xptr options_from_R(Rcpp::List const& l);
RcppExport SEXP _libpressio_options_from_R(SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List const& >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(options_from_R(l));
    return rcpp_result_gen;
END_RCPP
}
// options_from_json
options_xptr options_from_json(std::string const& json_str);
RcppExport SEXP _libpressio_options_from_json(SEXP json_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string const& >::type json_str(json_strSEXP);
    rcpp_result_gen = Rcpp::wrap(options_from_json(json_str));
    return rcpp_result_gen;
END_RCPP
}
// options_to_R
Rcpp::List options_to_R(options_xptr& ptr);
RcppExport SEXP _libpressio_options_to_R(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< options_xptr& >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(options_to_R(ptr));
    return rcpp_result_gen;
END_RCPP
}
// options_to_string
std::string options_to_string(options_xptr& ptr);
RcppExport SEXP _libpressio_options_to_string(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< options_xptr& >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(options_to_string(ptr));
    return rcpp_result_gen;
END_RCPP
}
// data_to_string
std::string data_to_string(data_xptr& ptr);
RcppExport SEXP _libpressio_data_to_string(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< data_xptr& >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(data_to_string(ptr));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_pressio();

static const R_CallMethodDef CallEntries[] = {
    {"_libpressio_get_instance", (DL_FUNC) &_libpressio_get_instance, 0},
    {"_libpressio_get_compressor", (DL_FUNC) &_libpressio_get_compressor, 2},
    {"_libpressio_get_io", (DL_FUNC) &_libpressio_get_io, 2},
    {"_libpressio_compressor_compress", (DL_FUNC) &_libpressio_compressor_compress, 3},
    {"_libpressio_compressor_decompress", (DL_FUNC) &_libpressio_compressor_decompress, 3},
    {"_libpressio_compressor_get_options", (DL_FUNC) &_libpressio_compressor_get_options, 1},
    {"_libpressio_compressor_get_documentation", (DL_FUNC) &_libpressio_compressor_get_documentation, 1},
    {"_libpressio_compressor_get_configuration", (DL_FUNC) &_libpressio_compressor_get_configuration, 1},
    {"_libpressio_compressor_get_metrics_results", (DL_FUNC) &_libpressio_compressor_get_metrics_results, 1},
    {"_libpressio_compressor_set_options", (DL_FUNC) &_libpressio_compressor_set_options, 2},
    {"_libpressio_io_read_with_template", (DL_FUNC) &_libpressio_io_read_with_template, 2},
    {"_libpressio_io_write", (DL_FUNC) &_libpressio_io_write, 2},
    {"_libpressio_io_read", (DL_FUNC) &_libpressio_io_read, 1},
    {"_libpressio_io_get_options", (DL_FUNC) &_libpressio_io_get_options, 1},
    {"_libpressio_io_set_options", (DL_FUNC) &_libpressio_io_set_options, 2},
    {"_libpressio_supported_compressors", (DL_FUNC) &_libpressio_supported_compressors, 0},
    {"_libpressio_supported_metrics", (DL_FUNC) &_libpressio_supported_metrics, 0},
    {"_libpressio_supported_io", (DL_FUNC) &_libpressio_supported_io, 0},
    {"_libpressio_data_to_R", (DL_FUNC) &_libpressio_data_to_R, 1},
    {"_libpressio_data_new_empty", (DL_FUNC) &_libpressio_data_new_empty, 2},
    {"_libpressio_data_new_owning", (DL_FUNC) &_libpressio_data_new_owning, 2},
    {"_libpressio_io_data_path_read", (DL_FUNC) &_libpressio_io_data_path_read, 2},
    {"_libpressio_data_new_clone", (DL_FUNC) &_libpressio_data_new_clone, 1},
    {"_libpressio_data_from_R", (DL_FUNC) &_libpressio_data_from_R, 1},
    {"_libpressio_data_from_R_typed", (DL_FUNC) &_libpressio_data_from_R_typed, 2},
    {"_libpressio_options_from_R_typed", (DL_FUNC) &_libpressio_options_from_R_typed, 2},
    {"_libpressio_options_from_R", (DL_FUNC) &_libpressio_options_from_R, 1},
    {"_libpressio_options_from_json", (DL_FUNC) &_libpressio_options_from_json, 1},
    {"_libpressio_options_to_R", (DL_FUNC) &_libpressio_options_to_R, 1},
    {"_libpressio_options_to_string", (DL_FUNC) &_libpressio_options_to_string, 1},
    {"_libpressio_data_to_string", (DL_FUNC) &_libpressio_data_to_string, 1},
    {"_rcpp_module_boot_pressio", (DL_FUNC) &_rcpp_module_boot_pressio, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_libpressio(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
